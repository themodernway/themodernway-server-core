/*
 * Copyright (c) 2018, The Modern Way. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
    	mavenCentral()
    }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.7.2')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.11')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5')
        classpath(group: 'org.owasp', name: 'dependency-check-gradle', version: '3.2.0')
        classpath(group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2')
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'org.sonarqube'
apply plugin: 'org.owasp.dependencycheck'

sourceCompatibility = 1.8

targetCompatibility = 1.8

version = "${MODULE_VERSION}"

group = 'com.themodernway'

eclipse { classpath { downloadJavadoc = true } }

checkstyle {
    toolVersion = '7.7'
    ignoreFailures = true
}

tasks.withType(Checkstyle) { source 'src/main' }

task deleteConfigs(type: Delete) {
    project.fileTree(dir: "${buildDir}/resources/main").each { file ->
        file.delete()
    }
}

task filterConfigs(dependsOn: deleteConfigs, type: Copy) {
    from sourceSets.main.resources
    into "${buildDir}/resources/main"
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

task doJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = project.file("${buildDir}/docs/javadoc")
	includes = [
        "${MODERN_INCLUDES_JAVADOC}"
    ]
    title = "${getProjectCommonName()}"
    (options as StandardJavadocDocletOptions).with {
        links = getJavaDocLinks()
        stylesheetFile = project.file('config/javadoc/modern.css')
        bottom = "<div><h4 class=\"footer\"><a href=\"${getBuildGITHomeURL()}\" target=\"_blank\">${getProjectCommonName()} - Copyright &copy; 2018, The Modern Way</a> - <a href=\"${getBuildGITCommitHash()}\" target=\"_blank\">${getBuildModuleVersion()}</a> - <a href=\"mailto:deansjones@gmail.com\">Author: Dean S. Jones</a></h4></div>"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
}

compileJava.dependsOn(clean)

jar.dependsOn(filterConfigs)

jar {
    manifest {
        attributes 'Implementation-Title': getProjectTitle(), 'Implementation-Version': getBuildModuleVersion()
    }
}

repositories {
    mavenCentral()
}

task dean { doLast { println "${SPRING_CORE_VERSION}" } }

task codeCoverage { doLast { println ':codeCoverage-done' } }

codeCoverage.dependsOn jacocoTestReport

jacocoTestReport {
    reports {
        csv {
            enabled true
            destination project.file("${buildDir}/reports/jacoco/coverage-${getBuildModuleVersion()}.csv")
        }
        xml.enabled false
        html.destination project.file("${buildDir}/reports/coverage")
    }
}

jacocoTestReport.dependsOn test

test {
    minHeapSize = '2048m'
    maxHeapSize = '2048m'
    testLogging.showStandardStreams = true
    jacoco {
        append = false
        destinationFile = project.file("${buildDir}/jacoco/testing.exec")
    }
}

pmd {
    ignoreFailures = true
    toolVersion = '5.6.1'
    ruleSets = [
        'java-basic',
        'java-braces'
    ]
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.1'
    effort = 'max'
    excludeFilter = project.file('config/findbugs/filter.xml')
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

dependencyCheck {
    failOnError = false
    outputDirectory = "${buildDir}/reports/cve"
    suppressionFile = project.file('config/cve/suppress.xml')
}

task checkCodeQuality { doLast { println ':checkCodeQuality-done' } }

checkCodeQuality.dependsOn codeCoverage,checkstyleMain,pmdMain,findbugsMain,dependencyCheckAnalyze

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

def Map getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def String getProjectArtifactID() {
    getProjectTitle().toLowerCase()
}

def String getProjectTitle() {
    getProjectCommonName().replaceAll(' ', '-')
}

def String getProjectCommonName() {
    'TheModernWay Server Core'
}

def String getBuildModuleVersion() {
    version
}

def String getBuildDate() {
    (new Date()).toString()
}

def String getBuildServerHost() {
    try {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e) {
        'localhost'
    }
}

def String getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def String getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def String getBuildServerBuild() {
    System.getenv('BUILD_DISPLAY_NAME') ?: "Gradle version ${gradle.gradleVersion}"
}

def String getBuildGITHomeURL() {
    'https://github.com/themodernway/' + getProjectArtifactID()
}

def String getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def String getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def String getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

configurations {
    compile.exclude(group: 'net.jcip', module: 'jcip-annotations')
}

dependencies {
    compile(group: 'com.themodernway', name: 'themodernway-common', version: "${MODERN_VERSION}")
    compile(group: 'org.ow2.asm', name: 'asm', version: '6.2')
    compile(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25')
    compile(group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25')
    compile(group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25')
    compile(group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3')
    compile(group: 'cglib', name: 'cglib-nodep', version: '3.2.6')
    compile(group: 'commons-io', name: 'commons-io', version: '2.6')
    compile(group: 'commons-net', name: 'commons-net', version: '3.6')
    compile(group: 'org.apache.commons', name: 'commons-lang3', version: '3.7')
    compile(group: 'commons-codec', name: 'commons-codec', version: '1.11')
    compile(group: 'commons-logging', name: 'commons-logging', version: '1.2')
    compile(group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3')
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5')
    compile(group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.10.0')
    compile(group: 'com.google.guava', name: 'guava', version: '25.1-jre')
    compile(group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.6.2')
    compile(group: 'com.github.ben-manes.caffeine', name: 'jcache', version: '2.6.2')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-properties', version: '2.9.5')
    compile(group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.9.5')
    compile(group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0')
    compile(group: 'net.minidev', name: 'json-smart', version: '2.3')
    compile(group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4') {
        exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
    }
    compile(group: 'io.micrometer', name: 'micrometer-core', version: '1.0.5')
    springCorePackages().each { String name ->
        compile(group: 'org.springframework', name: name, version: "${SPRING_CORE_VERSION}")
    }
    springSecurityPackages().each { String name ->
        compile(group: 'org.springframework.security', name: name, version: "${SPRING_SECURITY_VERSION}")
    }
    compile(group: 'com.google.code.gson', name: 'gson', version: '2.8.5')
    compile(group: 'com.sun.mail', name: 'javax.mail', version: '1.6.1')
    compile(group: 'io.projectreactor', name: 'reactor-core', version: '3.1.8.RELEASE')
    compile(group: 'org.springframework.session', name: 'spring-session-core', version: '2.0.4.RELEASE')
    compile(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.15', classifier: 'indy')
    compile(group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1')
    compile(group: 'javax.activation', name: 'activation', version: '1.1.1')
    compileOnly(group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing { sign configurations.archives }

def String getRepoUploadArchives() {
    getBuildModuleVersion().endsWith('SNAPSHOT') ? 'https://oss.sonatype.org/content/repositories/snapshots/' : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def String getUserNameUploadArchives() {
    project.findProperty('sonatype_username') ?: ''
}

def String getPassWordUploadArchives() {
    project.findProperty('sonatype_password') ?: ''
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: getRepoUploadArchives()) {
                authentication(userName: getUserNameUploadArchives(), password: getPassWordUploadArchives())
            }
            pom.project {
                name 'TheModernWay-Server-Core'
                packaging 'jar'
                description 'TheModernWay Server Core'
                url 'https://github.com/themodernway/themodernway-server-core'
                scm {
                    url 'scm:git@github.com:themodernway/themodernway-server-core.git'
                    connection 'scm:git@github.com:themodernway/themodernway-server-core.git'
                    developerConnection 'scm:git@github.com:themodernway/themodernway-server-core.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'sprocketnyc'
                        name 'Dean S. Jones'
                        email 'deansjones@gmail.com'
                        url 'https://www.themodernway.com'
                    }
                }
            }
        }
    }
}

def List<String> getJavaDocLinks() {
    def list = []
    def data = project.file('config/javadoc/JAVADOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine { line ->
            list << line
        }
    }
    list
}

def List<String> springCorePackages() {
    return [
        'spring-core',
        'spring-beans',
        'spring-context',
        'spring-context-support',
        'spring-expression',
        'spring-aop',
        'spring-jcl',
        'spring-aspects',
        'spring-jdbc',
        'spring-tx',
        'spring-web',
        'spring-webmvc',
        'spring-webflux',
        'spring-test'
    ]
}

def List<String> springSecurityPackages() {
    return [
        'spring-security-web',
        'spring-security-acl',
        'spring-security-core',
        'spring-security-crypto',
        'spring-security-config',
        'spring-security-aspects'
    ]
}
