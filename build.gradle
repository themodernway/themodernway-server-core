/*
 * Copyright (c) 2017, The Modern Way. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.7.2')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.10')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3')
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'pmd'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

sourceCompatibility = 1.8

targetCompatibility = 1.8

version = '1.2.10-RELEASE'

group = 'com.themodernway'

eclipse {
    classpath { downloadJavadoc = true }
}

checkstyle {
    toolVersion = "7.7"
    ignoreFailures = true
}

tasks.withType(Checkstyle) { source 'src/main' }

task deleteConfigs(type: Delete) {
    FileTree tree = fileTree(dir: "${buildDir}/resources/main")
    tree.each { File file ->
        delete(file)
    }
}

task filterConfigs(dependsOn: deleteConfigs, type: Copy) {
    from sourceSets.main.resources
    into "${buildDir}/resources/main"
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

task doJavaDocs(type: Groovydoc) {
    source = sourceSets.main.allSource
    classpath = sourceSets.main.runtimeClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    docTitle = "${getProjectCommonName()}"
    footer = "<small><a href=\"${getBuildGITHomeURL()}\" target=\"_blank\">${getProjectCommonName()} - &copy; 2017</a> - <a href=\"${getBuildGITCommitHash()}\" target=\"_blank\">${getBuildModuleVersion()}</a> - <a href=\"mailto:deansjones@gmail.com\">Author: Dean S. Jones</a></small>"
    includes = [
        'com/themodernway/server/core/**'
    ]
    getGroovydocLinks().each { name, list ->
        link(name, *list)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
}

compileJava.dependsOn(clean)

jar.dependsOn(filterConfigs)

jar {
    manifest {
        attributes 'Implementation-Title': getProjectTitle(), 'Implementation-Version': getBuildModuleVersion()
    }
}

repositories {
    mavenCentral()
    maven { url "${sonatype_snapshotURL}" }
}

task codeCoverage << { println ":codeCoverage-done" }

codeCoverage.dependsOn jacocoTestReport

jacocoTestReport {
    reports {
        csv {
            enabled true
            destination "${buildDir}/reports/jacoco/coverage-${version}.csv"
        }
        xml.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

jacocoTestReport.dependsOn test

test {
    jacoco {
        append = false
        destinationFile = file("${buildDir}/jacoco/testing.exec")
    }
}

pmd {
    ignoreFailures = true
    toolVersion = "5.6.1"
    ruleSets = [
        'java-basic',
        'java-braces'
        ]
}
    
findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    effort = "max"
    excludeFilter = project.file('config/findbugs/filter.xml')
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task checkCodeQuality << { println ":checkCodeQuality-done" }

checkCodeQuality.dependsOn codeCoverage,checkstyleMain,pmdMain,findbugsMain

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

def getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def String getProjectArtifactID() {
    getProjectTitle().toLowerCase()
}

def String getProjectTitle() {
    getProjectCommonName().replaceAll(' ', '-')
}

def String getProjectCommonName() {
    'TheModernWay Server Core'
}

def getBuildModuleVersion() {
    version
}

def getBuildDate() {
    (new Date()).toString()
}

def getBuildServerHost() {
    try {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e) {
        "localhost"
    }
}

def getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def getBuildServerBuild() {
    System.getenv('BUILD_DISPLAY_NAME') ?: 'Command line ' + GradleVersion.current().toString()
}

def getBuildGITHomeURL() {
    'https://github.com/themodernway/' + getProjectArtifactID()
}

def getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

configurations {
    compile.exclude(group: 'net.jcip', module: 'jcip-annotations')
}

dependencies {
    compile(group: 'com.themodernway', name: 'themodernway-common', version: '1.2.10-RELEASE')
    compile(group: 'org.ow2.asm', name: 'asm', version: '5.1')
    compile(group: 'log4j', name: 'log4j', version: '1.2.17')
    compile(group: 'log4j', name: 'apache-log4j-extras', version: '1.2.17')
    compile(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25')
    compile(group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25')
    compile(group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25')
    compile(group: 'cglib', name: 'cglib-nodep', version: '3.2.4')
    compile(group: 'org.fusesource.jansi', name: 'jansi', version: '1.16')
    compile(group: 'joda-time', name: 'joda-time', version: '2.9.9')
    compile(group: 'commons-io', name: 'commons-io', version: '2.5')
    compile(group: 'commons-net', name: 'commons-net', version: '3.6')
    compile(group: 'commons-lang', name: 'commons-lang', version: '2.6')
    compile(group: 'commons-codec', name: 'commons-codec', version: '1.10')
    compile(group: 'commons-logging', name: 'commons-logging', version: '1.2')
    compile(group: 'commons-digester', name: 'commons-digester', version: '2.1')
    compile(group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3')
    compile(group: 'commons-collections', name: 'commons-collections', version: '3.2.2')
    compile(group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3')
    compile(group: 'org.opensaml', name: 'opensaml', version: '2.6.4')
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3')
    compile(group: 'com.google.guava', name: 'guava', version: '23.3-jre')
    compile(group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.6.0')
    compile(group: 'com.github.ben-manes.caffeine', name: 'jcache', version: '2.6.0')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.2')
    compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-properties', version: '2.9.2')
    compile(group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4') {
        exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
    }
    compile(group: 'org.gebish', name: 'geb-core', version: '1.1.1') {
        exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
    }
    compile(group: 'org.seleniumhq.selenium', name: 'selenium-api', version: '3.5.3')
    compile(group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.5.3')
    springCorePackages().each { String name ->
        compile(group: 'org.springframework', name: name, version: '4.3.12.RELEASE')
    }
    springSecurityPackages().each { String name ->
        compile(group: 'org.springframework.security', name: name, version: '4.2.3.RELEASE')
    }
    springIntegrationPackages().each { String name ->
        compile(group: 'org.springframework.integration', name: name, version: '4.3.12.RELEASE')
    }
    compile(group: 'org.springframework.integration', name: 'spring-integration-groovy', version: '4.3.12.RELEASE') {
        exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
    }
    compile(group: 'com.github.groovy-wslite', name: 'groovy-wslite', version: '1.1.3') {
        exclude(group: 'org.codehaus.groovy', module: 'groovy-all')
    }
    compile(group: 'javax.mail', name: 'mail', version: '1.4.7')
    compile(group: 'io.projectreactor', name: 'reactor-core', version: '3.1.1.RELEASE')
    compile(group: 'org.springframework.integration', name: 'spring-integration-java-dsl', version: '1.2.3.RELEASE')
    compile(group: 'org.springframework.session', name: 'spring-session', version: '1.3.1.RELEASE')
    compile(group: 'org.springframework.amqp', name: 'spring-rabbit', version: '1.7.4.RELEASE')
    compile(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12', classifier: 'indy')
    compile(group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1')
    compile(group: 'javax.persistence', name: 'persistence-api', version: '1.0.2')
    compile(group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0')
    compile(group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1')
    compile(group: 'javax.jms', name: 'javax.jms-api', version: '2.0.1')
    compile(group: 'org.ajoberstar', name: 'grgit', version: '1.7.2')
    testCompile(group: 'log4j', name: 'log4j', version: '1.2.17')
    testCompile(group: 'log4j', name: 'apache-log4j-extras', version: '1.2.17')
    testCompile(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25')
    testCompile(group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25')
    testCompile(group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25')
    testCompile(group: 'commons-logging', name: 'commons-logging', version: '1.2')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing { sign configurations.archives }

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "${sonatype_stageingURL}") {
                //repository(url: "${sonatype_snapshotURL}") {
                authentication(userName: "${sonatype_user_tmw}", password: "${sonatype_password_tmw}")
            }
            pom.project {
                name 'TheModernWay-Server-Core'
                packaging 'jar'
                description 'TheModernWay Server Core'
                url 'https://github.com/themodernway/themodernway-server-core'
                scm {
                    url 'scm:git@github.com:themodernway/themodernway-server-core.git'
                    connection 'scm:git@github.com:themodernway/themodernway-server-core.git'
                    developerConnection 'scm:git@github.com:themodernway/themodernway-server-core.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'sprocketnyc'
                        name 'Dean S. Jones'
                        email 'deansjones@gmail.com'
                        url 'https://www.themodernway.com'
                    }
                }
            }
        }
    }
}

def Map<String, List<String>> getGroovydocLinks() {
    def lmap = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if (data.exists()) {
        data.eachLine { line ->
            def vals = ((CharSequence) line).tokenize(',')
            lmap[vals.head()] = vals.tail()
        }
    }
    lmap
}

task(buildGroovydocLinks) << {
    def site = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine { line ->
            site[line] = ((CharSequence) new URL("${line}/package-list").text).tokenize('\n')
        }
    }
    File make = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if(make.exists()) {
        make.delete()
    }
    make.createNewFile()
    def save = make.newPrintWriter()
    site.each { link, list ->
        def show = "${link}"
        list.each { line -> show = "${show},${line}" }
        save.println("${show}")
    }
    save.flush()
    save.close()
}

def List<String> springCorePackages() {
    return [
        'spring-core',
        'spring-beans',
        'spring-context',
        'spring-context-support',
        'spring-expression',
        'spring-aop',
        'spring-aspects',
        'spring-instrument',
        'spring-instrument-tomcat',
        'spring-messaging',
        'spring-jdbc',
        'spring-tx',
        'spring-jms',
        'spring-oxm',
        'spring-orm',
        'spring-web',
        'spring-webmvc',
        'spring-websocket',
        'spring-test'
    ]
}

def List<String> springSecurityPackages() {
    return [
        'spring-security-web',
        'spring-security-acl',
        'spring-security-core',
        'spring-security-ldap',
        'spring-security-crypto',
        'spring-security-config',
        'spring-security-aspects',
        'spring-security-messaging'
    ]
}

def List<String> springIntegrationPackages() {
    return [
        'spring-integration-core',
        'spring-integration-ip',
        'spring-integration-ws',
        'spring-integration-jms',
        'spring-integration-jpa',
        'spring-integration-jmx',
        'spring-integration-xml',
        'spring-integration-ftp',
        'spring-integration-sftp',
        'spring-integration-mail',
        'spring-integration-file',
        'spring-integration-http',
        'spring-integration-amqp',
        'spring-integration-event',
        'spring-integration-stream',
        'spring-integration-security',
        'spring-integration-scripting'
    ]
}